@startuml
!pragma teoz true
skinparam sequenceMessageAlign center

actor User
boundary "React\nFrontend"
participant Backend

== Dashboard ==
User -> "React\nFrontend" : GET /
"React\nFrontend" -> Backend++ : GET /api/games
Backend -> Backend: get games
Backend -> "React\nFrontend"--: <back:plum>games</back>

loop games.length
  "React\nFrontend" -> Backend++ : GET /api/games/<game_name>
  Backend -> Backend: construct\ngame card
  Backend -> "React\nFrontend"--: <back:plum>game_card</back>
end
rnote over "React\nFrontend": render dashboard

== Start Game ==
rnote over User: clicks on game_card
User -> "React\nFrontend" : GET /new/<game_name>
"React\nFrontend" -> Backend++: POST /api/games/<game_name>
Backend -> Backend: instantiate\nnew game\n\n+ game url/hash
Backend -> "React\nFrontend"--:  <back:plum>game_data</back>

rnote over "React\nFrontend": render invite screen

rnote over User
  - sends second <player_slug> to
  second participant
  - clicks "Start Game"
end note

== Play Game ==

User -> "React\nFrontend" : GET /play/<player_slug>
loop while game not finished
"React\nFrontend" -> Backend++: GET /api/play/<player_slug>
  Backend -> Backend: get game\nstate
  Backend --> "React\nFrontend"--:  <back:plum>game_state</back>
  alt#Gold #LightBlue your_turn
    rnote over "React\nFrontend": enable interaction
    User -> "React\nFrontend": Interaction
    "React\nFrontend" --> Backend++: PUT /api/play/<player_slug>
    Backend -> Backend: valid move?
    Backend --> "React\nFrontend"--: HTTP response move ok?
  else #Pink !your_turn
    rnote over "React\nFrontend": render watch-only
  end
end

@enduml